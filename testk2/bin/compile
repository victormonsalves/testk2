#!/usr/bin/env bash
# bin/compile

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
: ${LIBUV_VERSION:="1.8.0"}
: ${DNVM_BRANCH:="dev"}
: ${DNX_VERSION:="latest"}

function print() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function export_env_dir() {
  local env_dir=$1
  local whitelist_regex=${2:-'(DNX_VERSION|LIBUV_VERSION|PROJECT|BUILD_DEBUG|DNVM_BRANCH)$'}
  local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

LD_DIR=`cd $(dirname $0); cd ..; pwd`
export_env_dir ${ENV_DIR}

# Create Cache Directory
mkdir -p ${CACHE_DIR}

# Create Source Directory
# If you compiled from build dirctory directly then dnu publish throws error due to directory name
# contains underscore '_'. dnu will not support
SRC_DIR=`mktemp -d`
# Move source code into temporary src dir
(
    shopt -s dotglob
    mv ${BUILD_DIR}/* ${SRC_DIR}
)
print "Build Dir Path: ${SRC_DIR}"

# Find project.json
PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)

# Get app name from project.json
#APPNAME=`grep -Po '(?<="name": ")[^"]*' $PROJECT_JSON_FILE`

# Create publish directory
#TARGET_PATH="${BUILD_DIR}/${APP_NAME}"
#mkdir -p ${TARGET_PATH}

if [ -n "$BUILD_DEBUG" ]; then
	DNU_FLAGS=""
	echo "DNX_VERSION: ${DNX_VERSION}"
	echo "DNVM_BRANCH: ${DNVM_BRANCH}"
else
	DNU_FLAGS="--quiet"
fi

if [ -n "$UNSTABLE_TOOLCHAIN" ]; then
	DNVM_FLAGS="-u"
else
	DNVM_FLAGS=""
fi

# Create Aptfile with prerequisites package names and its download urls
#cat <<EOF > ${BUILD_DIR}/Aptfile
#libunwind8
#http://in.archive.ubuntu.com/ubuntu/pool/main/libu/libunwind/libunwind8_1.1-2.2ubuntu3_amd64.deb
#gettext
#http://in.archive.ubuntu.com/ubuntu/pool/main/g/gettext/gettext_0.18.3.1-1ubuntu3_amd64.deb
#libssl-dev
#http://in.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl-dev_1.0.1f-1ubuntu2.19_amd64.deb
#libcurl4-openssl-dev
#http://in.archive.ubuntu.com/ubuntu/pool/main/c/curl/libcurl4-openssl-dev_7.35.0-1ubuntu2.6_amd64.deb
#zlib1g
#http://in.archive.ubuntu.com/ubuntu/pool/main/z/zlib/zlib1g_1.2.8.dfsg-1ubuntu1_amd64.deb
#libicu-dev
#http://in.archive.ubuntu.com/ubuntu/pool/main/i/icu/libicu-dev_52.1-3ubuntu0.4_amd64.deb
#uuid-dev
#http://in.archive.ubuntu.com/ubuntu/pool/main/u/util-linux/uuid-dev_2.20.1-5.1ubuntu20.7_amd64.deb
#EOF

#APT_CACHE_DIR="$CACHE_DIR/apt/cache"
#APT_STATE_DIR="$CACHE_DIR/apt/state"

#mkdir -p "$APT_CACHE_DIR/archives/partial"
#mkdir -p "$APT_STATE_DIR/lists/partial"

#APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

#print "Updating apt caches"
#apt-get $APT_OPTIONS update | indent

# Download prerequisite packages using Aptfile
#for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
#  if [[ $PACKAGE == *deb ]]; then
#    PACKAGE_NAME=$(basename $PACKAGE .deb)
#    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

#    print "Fetching $PACKAGE"
#    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
#  else
#    print "Fetching .debs for $PACKAGE"
#    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
#  fi
#done

mkdir -p ${BUILD_DIR}/.apt
for DEB in $(ls -1 $LD_DIR/lib/*.deb); do
  print "Installing $(basename $DEB)"
  dpkg -x $DEB ${BUILD_DIR}/.apt/
done

# libuv configuration
print "libuv install"
mkdir -p ${BUILD_DIR}/libuvinstall
curl -sSL https://github.com/libuv/libuv/archive/v${LIBUV_VERSION}.tar.gz | tar zxfv - -C ${BUILD_DIR}
cd ${BUILD_DIR}/libuv-${LIBUV_VERSION}
sh autogen.sh
./configure --prefix=${BUILD_DIR}/libuvinstall
make
make install
cd ${SRC_DIR}
rm -rf ${BUILD_DIR}/libuv-${LIBUV_VERSION}
print "libuv installed."

mkdir -p ${BUILD_DIR}/.profile.d
cat <<EOF >${BUILD_DIR}/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:$HOME/libuvinstall/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="${BUILD_DIR}/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu:${BUILD_DIR}/.apt/usr/lib:${BUILD_DIR}/libuvinstall/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu:${BUILD_DIR}/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="${BUILD_DIR}/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu/pkgconfig:${BUILD_DIR}/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LD_DIR/export"

# DNVM configuration starts
print "dnvm installation starts"
touch ${HOME}/.profile
curl -sSL https://raw.githubusercontent.com/aspnet/Home/${DNVM_BRANCH}/dnvminstall.sh | DNX_BRANCH=dev sh && source ${HOME}/.dnx/dnvm/dnvm.sh
dnvm

export DNVM_RUNTIME_LOCAL_CACHE="${HOME}/.dnx"
export DNVM_RUNTIME_CACHE_LOCATION="${CACHE_DIR}/dnx/runtimes"
mkdir -p ${DNVM_RUNTIME_LOCAL_CACHE}
mkdir -p ${DNVM_RUNTIME_CACHE_LOCATION}
export PATH="$DNVM_RUNTIME_LOCAL_CACHE:$DNVM_RUNTIME_CACHE_LOCATION:$PATH"
ln -s ${DNVM_RUNTIME_CACHE_LOCATION} ${DNVM_RUNTIME_LOCAL_CACHE}/runtimes

# DNX configuration
dnvm install $DNX_VERSION $DNVM_FLAGS -runtime coreclr -alias default
mkdir -p ${BUILD_DIR}/.dnx
cp -r ${HOME}/.dnx/* ${BUILD_DIR}/.dnx/
export DNVM_RUNTIME_TARGET_CACHE="${BUILD_DIR}/.dnx"
export PATH="$DNVM_RUNTIME_TARGET_CACHE:$PATH"

# "DNVM upgrade starts"
#dnvm upgrade -runtime coreclr
#print "dnvm upgraded."

# DNX setting
DNX_VERSION=$(dnvm alias default)
#DNX_RUNTIME_LINK=`which dnx`
#export PATH="$DNX_RUNTIME_LINK:$PATH"

# app start up script
cat <<EOF > ${BUILD_DIR}/appstartup
#!/usr/bin/env bash
$HOME/approot/web --server.urls http://+:\$PORT
EOF
chmod 777 ${BUILD_DIR}/appstartup

# Create procfile
print "Procfile setting:-"
echo "web: ./appstartup" > ${BUILD_DIR}/Procfile

# DNU restore using project.json
print "dnu restore starts"
dnu restore ${DNU_FLAGS} ${PROJECT_JSON_FILE} --no-cache
print "dnu restore ended."

# DNU pulish using project.json
print "dnu publish starts."
dnu publish --out ${BUILD_DIR} ${DNU_FLAGS} --configuration Release ${PROJECT_JSON_FILE} --no-source --runtime ${DNX_VERSION}
print "dnu publish ended."
